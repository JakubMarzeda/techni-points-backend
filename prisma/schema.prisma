generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  TEACHER
  STUDENT
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          UserRole  @default(STUDENT)
  admin         Boolean   @default(false)

  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  apiKeys ApiKey[] // As we are yk... school for programmers, maybe someone will find a use for an api

  Student    Student?
  LibrusJunk LibrusCreds?
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ApiKey {
  id     String @id @default(uuid())
  key    String @unique
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id        String   @id @default(uuid())
  name      String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Points    Points[]
}

model Points {
  id        String   @id @default(uuid())
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String
  subject   String
  points    Int
  maxPoints Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LibrusCreds {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  login     String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
